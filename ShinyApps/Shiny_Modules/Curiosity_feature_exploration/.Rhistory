runApp("Curiosity_univariate")
library(shiny)
runApp("Curiosity_univariate")
runApp("Curiosity_univariate")
runApp("test")
library(shiny)
runapp("univariate")
runApp("univariate")
runApp("univariate", display.mode = "showcase")
runApp("bivariate_num_num", display.mode = "showcase")
runApp("bivariate_num_num", display.mode = "showcase")
runApp("bivariate_num_num", display.mode = "showcase")
runApp("bivariate_num_num", display.mode = "showcase")
data<-read.csv("C:/Users/dwoo57/Google Drive/Career/Data Mining Competitions/Kaggle/Walmart - Inventory and weather prediction/Experiments/Gamma/Train/Explanatory_Analysis/train_dept92_yoy_sales_unemployment.csv")
fit<-lm(Weekly_Sales ~ Unemploy, data = data)
plot(fit)
plot.lm(fit)
plot(Weekly_Sales ~ Unemploy, data = data)
abline(fit)
abline(fit,col='skyblue')
plot(fit)
plot(Weekly_Sales ~ Unemploy, data = data)
abline(fit,col='skyblue')
plot(fit)
abline(fit,col='skyblue')
plot(Weekly_Sales ~ Unemploy, data = data)
abline(fit,col='skyblue')
runApp("bivariate_num_num", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
output[["scatter"]] <- renderPlot({
plot(Weekly_Sales ~ Unemploy, data = data)
abline(fit,col='skyblue')
output[["scatter"]] <- renderPlot({
plot(Weekly_Sales ~ Unemploy, data = data)
abline(fit,col='skyblue')
})
z
output[["scatter"]] <- renderPlot({
plot(Weekly_Sales ~ Unemploy, data = data)
abline(fit,col='skyblue')
})
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
plot_output_list
runApp("Multiple_Plots", display.mode = "showcase")
data<-read.csv("C:/Users/dwoo57/Google Drive/Career/Data Mining Competitions/Kaggle/Walmart - Inventory and weather prediction/Experiments/Gamma/Train/Explanatory_Analysis/train_dept92_yoy_sales_unemployment.csv")
fit<-lm(Weekly_Sales ~ Unemploy, data = data)
output[["scatter"]] <- renderPlot({
plot(Weekly_Sales ~ Unemploy, data = data)
abline(fit,col='skyblue')
output[["scatter"]] <- renderPlot({
plot(Weekly_Sales ~ Unemploy, data = data)
abline(fit,col='skyblue')
})
output[["scatter"]] <- renderPlot({
plot(Weekly_Sales ~ Unemploy, data = data)
abline(fit,col='skyblue')
})
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
data<-read.csv("C:/Users/dwoo57/Google Drive/Career/Data Mining Competitions/Kaggle/Walmart - Inventory and weather prediction/Experiments/Gamma/Train/Explanatory_Analysis/train_dept92_yoy_sales_unemployment.csv")
fit<-lm(Weekly_Sales ~ Unemploy, data = data)
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
plot(fit)
runApp("Multiple_Plots", display.mode = "showcase")
runApp("Multiple_Plots", display.mode = "showcase")
runApp('bivariate_num_num')
library(shiny)
runApp('bivariate_num_num')
runApp('bivariate_num_num')
runApp('Multiple_Plots')
data<-read.csv("C:/Users/dwoo57/Google Drive/Career/Data Mining Competitions/Kaggle/Walmart - Inventory and weather prediction/Experiments/Gamma/Train/Explanatory_Analysis/train_dept92_yoy_sales_unemployment.csv")
str(data)
qplot(Unemploy,Weekly_Sales,data = data, color = Store_type )
library(ggplot2)
qplot(Unemploy,Weekly_Sales,data = data, color = Store_type )
qplot(Unemploy,Weekly_Sales,data = data, color = Store_type ,size=12)
qplot(Unemploy,Weekly_Sales,data = data, color = Store_type ,size=15)
qplot(Unemploy,Weekly_Sales,data = data, color = Store_type ,size=20)
summary(data)
sample<-read.csv('C:\Users\dwoo57\Google Drive\Career\Data Mining Competitions\Kaggle\Walmart - Inventory and weather prediction\Experiments\Gamma\Exp_A\Dept92_All_stores.csv')
path = 'C:\Users\dwoo57\Google Drive\Career\Data Mining Competitions\Kaggle\Walmart - Inventory and weather prediction\Experiments\Gamma\Exp_A\Dept92_All_stores.csv'
path = 'C:\Users\dwoo57\Google Drive\Career\Data Mining Competitions\Kaggle\Walmart - Inventory and weather prediction\Experiments\Gamma\Exp_A\Dept92_All_stores.csv'
path = "C:\Users\dwoo57\Google Drive\Career\Data Mining Competitions\Kaggle\Walmart - Inventory and weather prediction\Experiments\Gamma\Exp_A\Dept92_All_stores.csv"
path = c("C:\Users\dwoo57\Google Drive\Career\Data Mining Competitions\Kaggle\Walmart - Inventory and weather prediction\Experiments\Gamma\Exp_A\Dept92_All_stores.csv")
sample<-read.csv('C:/Users/dwoo57/Google Drive/Career/Data Mining Competitions/Kaggle/Walmart - Inventory and weather prediction/Experiments/Gamma/Exp_A/Dept92_All_stores.csv')
str(sample)
sample$Date<-as.Date(sample$Date,"%m/%d/%Y")
str(sample)
plot(weekly_sales ~ Date, data = sample, type = 'l')
plot(Weekly_Sales ~ Date, data = sample, type = 'l')
library(plyr)
mean(sample.Weekly_Sales)
mean(sample$Weekly_Sales)
sum(sample$Weekly_Sales)
sample.new<-ddply(sample, .(Date,),summarise,sum = sum(sample$Weekly_Sales))
sample.new<-ddply(sample, .(Date,),summarise,sum = sum(Weekly_Sales))
sample.new<-ddply(sample, .(Date),summarise,sum = sum(Weekly_Sales))
str(sample.new)
sample.new<-ddply(sample, .(Date),summarise,Weekly_Sales = sum(Weekly_Sales))
str(sample.new)
plot(Weekly_Sales ~ Date, data = sample.new, type = 'l')
summary(sample.new)
sample.new<-ddply(sample, .(Date,Year),summarise,Weekly_Sales = sum(Weekly_Sales))
str(sample.new)
summary(sample.new)
ddply(sample, .(Year),summarise,Weekly_Sales = sum(Weekly_Sales))
sample.new<-ddply(sample, .(Weeknum,Year,),summarise,Weekly_Sales = sum(Weekly_Sales))
str(sample.new)
sample.new<-ddply(sample, .(Weeknum,Year),summarise,Weekly_Sales = sum(Weekly_Sales))
str(sample.new)
sample.new<-ddply(sample, .(Date,Weeknum,Year),summarise,Weekly_Sales = sum(Weekly_Sales))
str(sample.new)
ddply(sample, .(Year),summarise,Weekly_Sales = sum(Weekly_Sales))
library(lattice) # xyplot
library(latticeExtra) # layer_, panel.xblocks
p2 <- xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", layout = c(1, 3))
xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", layout = c(1, 3))
xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", auto.key = list(lines = TRUE, points = FALSE))
myPalette <- brewer.pal(nlevels(sample.new$Year), "Set3")
library(RColorBrewer) # brewer.pal
myPalette <- brewer.pal(nlevels(sample.new$Year), "Set3")
sample.new$Year
xyplot(GasDiff ~ DayOfYear, A, group = Year, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(A$Year))),
auto.key = list(lines = TRUE, points = FALSE))
xyplot(Weekly_Sales ~ Weeknum, sample.new, group = Year, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(A$Year))),
auto.key = list(lines = TRUE, points = FALSE))
xyplot(Weekly_Sales ~ Weeknum, sample.new, group = Year, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(sample.new$Year))),
auto.key = list(lines = TRUE, points = FALSE))
nlevels(sample.new$Year)
sample.new$Year
summary(sample.new$Year)
xyplot(Weekly_Sales ~ Weeknum, sample.new, group = Year, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(sample.new$Year))),
auto.key = list(lines = TRUE, points = FALSE))
xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", auto.key = list(lines = TRUE, points = FALSE))
xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", layout = c(1, 3))
xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", layout = c(1, 3))
xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", auto.key = list(lines = TRUE, points = FALSE))
myPalette <- brewer.pal(nlevels(sample.new$Year), "Set3")
xyplot(Weekly_Sales ~ Weeknum, sample.new, group = Year, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(sample.new$Year))),
auto.key = list(lines = TRUE, points = FALSE))
xyplot(Weekly_Sales ~ Weeknum, sample.new, group = sample.new$Year, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(sample.new$Year))),
auto.key = list(lines = TRUE, points = FALSE))
str(sample.new)
sample.new<-factor(sample.new$Year)
xyplot(Weekly_Sales ~ Weeknum, sample.new, group = sample.new$Year, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(sample.new$Year))),
auto.key = list(lines = TRUE, points = FALSE))
xyplot(Weekly_Sales ~ Weeknum, sample.new, group = Year, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(sample.new$Year))),
auto.key = list(lines = TRUE, points = FALSE))
xyplot(Weekly_Sales ~ Weeknum, sample.new, group = Year, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(Year))),
auto.key = list(lines = TRUE, points = FALSE))
dts <- as.Date("20050101", '%Y%m%d') + seq(0,1000,15)
A <- data.frame( Dates = dts, Gas = 4000 + cumsum(abs( rnorm(length(dts), 100, 30))))
A <- transform( A,
Year = format(Dates, '%Y'),
DayOfYear = as.numeric( format(Dates, '%j')),
GasDiff = c(diff( Gas ),NA))
library(lattice) # xyplot
library(latticeExtra) # layer_, panel.xblocks
library(gridExtra) # grid.arrange
library(RColorBrewer) # brewer.pal
png("png1.png")
p1 <- xyplot(GasDiff ~ Dates, group = Year, A, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(A$Year))),
auto.key = list(lines = TRUE, points = FALSE))
p2 <- xyplot(GasDiff ~ DayOfYear | Year, A, type = "l", layout = c(1, 3))
p3 <- xyplot(GasDiff ~ DayOfYear, A, group = Year, type = "l",
auto.key = list(lines = TRUE, points = FALSE))
# and here is another style:
myPalette <- brewer.pal(nlevels(A$Year), "Set3")
p4 <- xyplot(GasDiff ~ Dates, A, type = "l", col = 1) +
layer_(panel.xblocks(A$Dates, myPalette[A$Year]))
grid.arrange(nrow = 2, p1, p2, p3, p4)
dev.off()
grid.arrange(nrow = 2, p1, p2, p3, p4)
xyplot(GasDiff ~ Dates, group = Year, A, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(A$Year))),
auto.key = list(lines = TRUE, points = FALSE))
xyplot(GasDiff ~ DayOfYear | Year, A, type = "l", layout = c(1, 3))
xyplot(GasDiff ~ DayOfYear, A, group = Year, type = "l",
auto.key = list(lines = TRUE, points = FALSE))
sample.new<-ddply(sample, .(Date,Weeknum,Year),summarise,Weekly_Sales = sum(Weekly_Sales))
str(sample.new)
xyplot(Weekly_Sales ~ Weeknum, sample.new, group = Year, type = "l",
auto.key = list(lines = TRUE, points = FALSE))
library(lattice) # xyplot
library(latticeExtra) # layer_, panel.xblocks
library(gridExtra) # grid.arrange
library(RColorBrewer) # brewer.pal
# need to overlap that is more useful
png("png1.png")
p1 <- xyplot(GasDiff ~ Dates, group = Year, A, type = "l",
par.settings = list(superpose.line = list(col = 1:nlevels(A$Year))),
auto.key = list(lines = TRUE, points = FALSE))
p2 <- xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", layout = c(1, 3))
# this splits vertically
xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", layout = c(1, 3))
# this splits horizontally
xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", auto.key = list(lines = TRUE, points = FALSE))
# simple overlap plot
xyplot(Weekly_Sales ~ Weeknum, sample.new, group = Year, type = "l",
auto.key = list(lines = TRUE, points = FALSE))
e
xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", layout = c(1, 3))
xyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = "l", auto.key = list(lines = TRUE, points = FALSE))
xyplot(Weekly_Sales ~ Weeknum, sample.new, group = Year, type = "l",
auto.key = list(lines = TRUE, points = FALSE))
library(ggplot2)
ggplot(sample.new, aes(Weekly_Sales)) +
geom_line( aes(colour = Year) )  +
geom_point( aes(shape = Year))
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = Year) )  +
geom_point( aes(shape = Year))
ggplot(sample.new, aes(Weekly_Sales,Weeknum)) +
geom_line( aes(colour = Year) )  +
geom_point( aes(shape = Year))
str(sample.new)
ggplot(sample.new, aes(Weekly_Sales,Weeknum)) +
geom_line( aes(colour = Year) )  +
geom_point( aes(shape = Year))
ggplot(sample.new, aes(Weekly_Sales,Weeknum)) +
geom_line( aes(colour = Year) )  +
geom_point( aes(shape = factor(Year))
ggplot(sample.new, aes(Weekly_Sales,Weeknum)) +
geom_line( aes(colour = Year) )  +
geom_point( aes(shape = factor(Year)))
ggplot(sample.new, aes(Weekly_Sales,Weeknum)) +
geom_line( aes(colour = factor(Year) )  +
geom_point( aes(shape = factor(Year)))
ggplot(sample.new, aes(Weekly_Sales,Weeknum)) +
geom_line( aes(colour = factor(Year) ))  +
geom_point( aes(shape = factor(Year))))
ggplot(sample.new, aes(Weekly_Sales,Weeknum)) +
geom_line( aes(colour = factor(Year) ))
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ))
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ))  +
geom_point( aes(shape = factor(Year)))
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ))  +
geom_point( aes(shape = factor(Year)),size = 5)
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ))  +
geom_point( aes(shape = factor(Year)),size = 3)
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 3)  +
geom_point( aes(shape = factor(Year)),size = 3)
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 2)  +
geom_point( aes(shape = factor(Year)),size = 3)
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 1)  +
geom_point( aes(shape = factor(Year)),size = 3)
str(sample)
sample.new<-ddply(sample, .(Date,Weeknum,Year,IsHoliday),summarise,Weekly_Sales = sum(Weekly_Sales))
str(sample.new)
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(interaction(factor(Year), factor(IsHoliday)) ),size = 1)
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( group = aes(interaction(factor(Year), factor(IsHoliday)) ),size = 1)
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( group = interaction(factor(Year), factor(IsHoliday)),size = 1)
str(sample.new)
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( group = interaction(factor(sample.new$Year), factor(sample.new$IsHoliday)),size = 1)
ggplot(sample.new, aes(x=Weeknum, y=Weekly_Sales, colour=factor(Year), shape = factor(Year),
group=interaction(Year, IsHoliday))) +
geom_point() + geom_line()
ggplot(sample.new, aes(x=Weeknum, y=Weekly_Sales, colour=factor(Year), shape = factor(IsHoliday),
group=interaction(Year, IsHoliday))) +
geom_point() + geom_line()
ggplot(sample.new, aes(x=Weeknum, y=Weekly_Sales, colour=factor(Year), shape = factor(IsHoliday),
)) +
geom_point() + geom_line()
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 1)  +
geom_point( aes(shape = factor(IsHoliday)),size = 3)
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 1)  +
geom_point( aes(shape = factor(IsHoliday)),size = 3 , color ='pink')
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 1)  +
geom_point( aes(color = factor(IsHoliday)),size = 3 )
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 1)  +
geom_point( aes(color = factor(IsHoliday)),size = 5)
is going on
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 1)  +
geom_point( aes(color = factor(IsHoliday)),size = 4)
is going on
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 1)  +
geom_point( aes(color = factor(IsHoliday)),size = 3)
s going on
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 1)  +
geom_point( aes(color = factor(IsHoliday)),size = 3.5)
str(sample.new)
library(forecast)
str(sample.new)
summary(sample.new)
train_ts<- ts(sample.new$Weekly_Sales, frequency=52, start = c(2012, 2,5))
plot(train_ts)
fit1 <- stl(train_ts,  s.window="periodic", t.window = 52)
plot(fit1)
train_ts<- ts(sample.new$Weekly_Sales, frequency=7, start = c(2012, 2,5))
plot(train_ts)
fit1 <- stl(train_ts,  s.window="periodic", t.window = 52)
plot(fit1)
train_ts<- ts(sample.new$Weekly_Sales, frequency=52, start = c(2012, 2,5))
fit1 <- stl(train_ts,  s.window="periodic", t.window = 52)
plot(fit1)
train_ts<- ts(sample.new$Weekly_Sales, frequency=4, start = c(2012, 2,5))
fit1 <- stl(train_ts,  s.window="periodic", t.window = 52)
plot(fit1)
train_ts<- ts(sample.new$Weekly_Sales, frequency=52, start = c(2012, 2,5))
fit1 <- stl(train_ts,  s.window="periodic", t.window = 52)
plot(fit1)
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 1)  +
geom_point( aes(shape = factor(Year)),size = 3)
ggplot(sample.new, aes(Weeknum,Weekly_Sales)) +
geom_line( aes(colour = factor(Year) ),size = 1)  +
geom_point( aes(color = factor(IsHoliday)),size = 3.5)
plot(fit1)
summary(sample)
Title
train_ts<- ts(sample.new$Weekly_Sales, frequency=52, start = c(2010, 2,5))
plot(train_ts)
fit1 <- stl(train_ts,  s.window="periodic", t.window = 52)
plot(fit1)
sample.new.subset<-subset(sample.new, Date >= "2012-01-01" & orig_date <= "2013-12-31")
sample.new.subset<-subset(sample.new, Date >= "2012-01-01" & Date <= "2013-12-31")
train_ts<- ts(sample.new.subset$Weekly_Sales, frequency=52, start = c(2010, 2,5))
plot(train_ts)
sample.new.subset<-subset(sample.new, Date >= "2010-01-01" & Date <= "2011-12-31")
train_ts<- ts(sample.new.subset$Weekly_Sales, frequency=52, start = c(2010, 2,5))
plot(train_ts)
fit1 <- stl(train_ts,  s.window="periodic", t.window = 52)
plot(fit1)
sample.new.subset<-subset(sample.new, Date >= "2010-01-01" & Date <= "2012-02-28")
train_ts<- ts(sample.new.subset$Weekly_Sales, frequency=52, start = c(2010, 2,5))
plot(train_ts)
fit1 <- stl(train_ts,  s.window="periodic", t.window = 52)
plot(fit1)
summary(fit1)
accuracy(fit1)
plot(fit1)
accuracy(fit1)
accuracy(fit1,train_ts)
fit1 <- stlm(train_ts,  s.window="periodic", t.window = 52)
accuracy(forecast(fit1))
plot(train_ts)
plot(fit1)
fit1 <- stl(log(train_ts),  s.window="periodic", t.window = 52)
plot(fit1)
fit1 <- stl(log(train_ts),  s.window="periodic", t.window = 52)
plot(fit1)
