{
    "contents" : "# Goals take a time series data set \n# First thing is visualize see what is going on\n# Second thing is start to generalize any repeatable patterns. Start quantifying.\n\n# like deep learning start highlevel. get the most obvious then nip pick\n\n#like the idea of calling it a sample, meaning that it's not the full population so we want to intepret abt the population\nsample<-read.csv('C:/Users/dwoo57/Google Drive/Career/Data Mining Competitions/Kaggle/Walmart - Inventory and weather prediction/Experiments/Gamma/Exp_A/Dept92_All_stores.csv')\n\n#like this idea. Need to check how they are being represented\nstr(sample)\nsample$Date<-as.Date(sample$Date,\"%m/%d/%Y\")\n\n#also assume weekly_sales is in units\n# why is there decimals...oz?\n# for now assume revenue, is there any stores that have \n# most of them do not round up to whole # so most likely dollars. Also, have to coincide with markdowns\n# so could this be price increases or more people buying. Likely that more people buying. people expect same prices\n# also prices shouldnt flunctuate so much as supply would be somewhat maintained\n\n#High level then low level\n\n####################### AGGREGATION ########################################\n\n#Can we aggregate across stores\n\n#option A preaggregate\nlibrary(plyr)\nsample.new<-ddply(sample, .(Date,Weeknum,Year,IsHoliday),summarise,Weekly_Sales = sum(Weekly_Sales))\nstr(sample.new)\nddply(sample, .(Year),summarise,Weekly_Sales = sum(Weekly_Sales))\n\n# now how to aggreate across stores\nplot(Weekly_Sales ~ Date, data = sample.new, type = 'l')\n\nmean(sample$Weekly_Sales)\nsum(sample$Weekly_Sales)\n\n\n####################### VISUALIZATION ########################################\n\nlibrary(lattice) # xyplot\nlibrary(latticeExtra) # layer_, panel.xblocks\nlibrary(gridExtra) # grid.arrange\nlibrary(RColorBrewer) # brewer.pal\nlibrary(ggplot2)\n\n# several options for plotting\n# need to overlap that is more useful\n\n# this splits vertically\nxyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = \"l\", layout = c(1, 3))\n\n# this splits horizontally\nxyplot(Weekly_Sales ~ Weeknum | Year, sample.new, type = \"l\", auto.key = list(lines = TRUE, points = FALSE))\n\n# simple overlap plot\nxyplot(Weekly_Sales ~ Weeknum, sample.new, group = Year, type = \"l\",\n       auto.key = list(lines = TRUE, points = FALSE))\n\n#this seems clearer\nggplot(sample.new, aes(Weeknum,Weekly_Sales)) + \n  geom_line( aes(colour = factor(Year) ),size = 1)  + \n  geom_point( aes(shape = factor(Year)),size = 3)\n\n# this is helpful, by makring holidays so we know what is going on\nggplot(sample.new, aes(Weeknum,Weekly_Sales)) + \n  geom_line( aes(colour = factor(Year) ),size = 1)  + \n  geom_point( aes(color = factor(IsHoliday)),size = 3.5)\n\n\n\nstr(sample.new)\nsummary(sample.new)\n\nplot()\n\n# now show seasonality for simplicity\nlibrary(forecast)\nsample.new.subset<-subset(sample.new, Date >= \"2010-01-01\" & Date <= \"2012-02-28\")\n\ntrain_ts<- ts(sample.new.subset$Weekly_Sales, frequency=52, start = c(2010, 2,5))\nplot(train_ts)\n\nfit1 <- stl(log(train_ts),  s.window=\"periodic\", t.window = 52)\nplot(fit1)\n\n#also look at the trend line does this seem ok\n#check remainder can plot this and make sure meets assumptions.\n#what would we expect to see here\n\nsummary(fit1)\n\n#why is this not working\naccuracy(forecast(fit1))\n\n#if so then MAPE of 1.3% that seems reasonable\n\n#next steps simple....how is the prediction?\n#maybe this is where framing the problem is important or reframing the problem is important...\n#maybe it's typical in exploring what we can solve from the problem\n#2010 predicts 2011\n\n# start with idea first then backwards. Set the bar high first then come to reality\n# Predict rest of 2012, 2013. 2012 Nov to 2013 July (07) - so about 9 months. at the weekly level. Predict the next year\n# Given 2.5 years predict 1 year in advance\n\n#theoratically seasonality per year is betters\n\n# what is the intution behind this?\n# wanted to show the pay period more distinct\n# also trend\n# remainder see 2012 is low then 2013 is high back up again\n# also for remainder can see autocorrelation?\n\n#remainder shows the autocorrelation\n\n# What general statements can we make at this point? \n\n# Across stores, \n    #2010 to 2011. \n        # Seasonality = very similar - can we quantify this\n        # Trends = especially in the tail end of the year increases in sales. Assume prices remain constant\n    #2011 to 2012\n        #Seasonality = before typical spikes there is an uptick\n\n    #also note that 2012 is a leap year so that's why the holidays may be offset\n    #visualization is key, also starting at a high level helps\n\n    #start with what we know first....the most obvious first\n    #we know seasonality for 2010 and 2011 looks imilar can we quantify this\n\n# Questions\n    # does it look like 2012 is shifted one week forward? Because of that one day it shifts it so much?\n    # i can possibly get the week offsets\n    # how can we normalize and compare them? Do we use the holiday weeks to rebalance it?\n      # why do we want to normalize? So we can compare effects promos to non-holiday and holiday...so\n          #promos -     holiday , non-holiday\n          #non-promos - holiday , non-holiday\n          #what is the impact of the promos in this case.....\n    # simple answer is should we shift 2012 backwards by 1?\n    # also seems to be 3 holidays, should there be 4? Yes this is 4. Super Bowl, Labor Day, Thanksgiving, and Christmas. \n\n#todos\n    # have todo list of things to look at\n    # can we mark major holidays, there should be four of them\n    # also a good concept is interaction plot for 2 treatments and dependent variable\n    # can think of modules as variable types as well as # of variables\n\n\n",
    "created" : 1435687250779.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1104613704",
    "id" : "F415F673",
    "lastKnownWriteTime" : 1435785572,
    "path" : "C:/Users/dwoo57/Google Drive/Knowledge Base/R Scripts/ShinyApps/Shiny_Modules/Curiosity_feature_exploration/time_series/time_series_exploration.R",
    "project_path" : "time_series/time_series_exploration.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}